/*
 * Generated by Bluespec Compiler, version 2021.12.1 (build fd501401)
 * 
 * On Sat Oct 28 15:43:42 IST 2023
 * 
 */
#include "bluesim_primitives.h"
#include "mkTb.h"


/* String declarations */
static std::string const __str_literal_1("Cnt: %d, Output: %d", 19u);


/* Constructor */
MOD_mkTb::MOD_mkTb(tSimStateHdl simHdl, char const *name, Module *parent)
  : Module(simHdl, name, parent),
    __clk_handle_0(BAD_CLOCK_HANDLE),
    INST_cnt(simHdl, "cnt", this, 8u, (tUInt8)0u, (tUInt8)0u),
    INST_uut(simHdl, "uut", this),
    PORT_RST_N((tUInt8)1u)
{
  symbol_count = 5u;
  symbols = new tSym[symbol_count];
  init_symbols_0();
}


/* Symbol init fns */

void MOD_mkTb::init_symbols_0()
{
  init_symbol(&symbols[0u], "cnt", SYM_MODULE, &INST_cnt);
  init_symbol(&symbols[1u], "RL_get_output", SYM_RULE);
  init_symbol(&symbols[2u], "RL_transmit_uart", SYM_RULE);
  init_symbol(&symbols[3u], "RL_update_cnt", SYM_RULE);
  init_symbol(&symbols[4u], "uut", SYM_MODULE, &INST_uut);
}


/* Rule actions */

void MOD_mkTb::RL_update_cnt()
{
  tUInt8 DEF_x__h110;
  DEF_x__h387 = INST_cnt.METH_read();
  DEF_x__h110 = (tUInt8)255u & (DEF_x__h387 + (tUInt8)1u);
  INST_cnt.METH_write(DEF_x__h110);
}

void MOD_mkTb::RL_transmit_uart()
{
  tUInt8 DEF_NOT_cnt_EQ_3_6_AND_cnt_EQ_10_OR_NOT_cnt_EQ_50__ETC___d23;
  tUInt8 DEF_cnt_EQ_3_OR_NOT_cnt_EQ_10_AND_cnt_EQ_50_OR_cnt_ETC___d13;
  tUInt8 DEF_cnt_EQ_10___d7;
  tUInt8 DEF_cnt_EQ_250___d24;
  tUInt8 DEF_cnt_EQ_3___d6;
  tUInt32 DEF_IF_cnt_EQ_3_THEN_0xABCDBCDA_ELSE_IF_cnt_EQ_50__ETC___d15;
  tUInt8 DEF_cnt_EQ_50___d9;
  DEF_x__h387 = INST_cnt.METH_read();
  DEF_cnt_EQ_50___d9 = DEF_x__h387 == (tUInt8)50u;
  switch (DEF_x__h387) {
  case (tUInt8)3u:
    DEF_IF_cnt_EQ_3_THEN_0xABCDBCDA_ELSE_IF_cnt_EQ_50__ETC___d15 = 2882387162u;
    break;
  case (tUInt8)50u:
    DEF_IF_cnt_EQ_3_THEN_0xABCDBCDA_ELSE_IF_cnt_EQ_50__ETC___d15 = 305454266u;
    break;
  default:
    DEF_IF_cnt_EQ_3_THEN_0xABCDBCDA_ELSE_IF_cnt_EQ_50__ETC___d15 = 85230104u;
  }
  DEF_cnt_EQ_3___d6 = DEF_x__h387 == (tUInt8)3u;
  DEF_cnt_EQ_10___d7 = DEF_x__h387 == (tUInt8)10u;
  DEF_cnt_EQ_250___d24 = DEF_x__h387 == (tUInt8)250u;
  DEF_cnt_EQ_3_OR_NOT_cnt_EQ_10_AND_cnt_EQ_50_OR_cnt_ETC___d13 = DEF_cnt_EQ_3___d6 || (!DEF_cnt_EQ_10___d7 && (DEF_cnt_EQ_50___d9 || DEF_x__h387 == (tUInt8)150u));
  DEF_NOT_cnt_EQ_3_6_AND_cnt_EQ_10_OR_NOT_cnt_EQ_50__ETC___d23 = !DEF_cnt_EQ_3___d6 && (DEF_cnt_EQ_10___d7 || (!DEF_cnt_EQ_50___d9 && (DEF_x__h387 == (tUInt8)60u || DEF_x__h387 == (tUInt8)200u)));
  if (DEF_cnt_EQ_3_OR_NOT_cnt_EQ_10_AND_cnt_EQ_50_OR_cnt_ETC___d13)
    INST_uut.METH_par_in(DEF_IF_cnt_EQ_3_THEN_0xABCDBCDA_ELSE_IF_cnt_EQ_50__ETC___d15);
  if (DEF_NOT_cnt_EQ_3_6_AND_cnt_EQ_10_OR_NOT_cnt_EQ_50__ETC___d23)
    INST_uut.METH_start_tx();
  if (!(PORT_RST_N == (tUInt8)0u))
    if (DEF_cnt_EQ_250___d24)
      dollar_finish(sim_hdl, "32", 1u);
}

void MOD_mkTb::RL_get_output()
{
  tUInt8 DEF_x_uart32bit_tx__h91;
  DEF_x__h387 = INST_cnt.METH_read();
  DEF_x_uart32bit_tx__h91 = INST_uut.METH_uart32bit_tx();
  if (!(PORT_RST_N == (tUInt8)0u))
    dollar_display(sim_hdl, this, "s,8,1", &__str_literal_1, DEF_x__h387, DEF_x_uart32bit_tx__h91);
}


/* Methods */


/* Reset routines */

void MOD_mkTb::reset_RST_N(tUInt8 ARG_rst_in)
{
  PORT_RST_N = ARG_rst_in;
  INST_uut.reset_RST_N(ARG_rst_in);
  INST_cnt.reset_RST(ARG_rst_in);
}


/* Static handles to reset routines */


/* Functions for the parent module to register its reset fns */


/* Functions to set the elaborated clock id */

void MOD_mkTb::set_clk_0(char const *s)
{
  __clk_handle_0 = bk_get_or_define_clock(sim_hdl, s);
}


/* State dumping routine */
void MOD_mkTb::dump_state(unsigned int indent)
{
  printf("%*s%s:\n", indent, "", inst_name);
  INST_cnt.dump_state(indent + 2u);
  INST_uut.dump_state(indent + 2u);
}


/* VCD dumping routines */

unsigned int MOD_mkTb::dump_VCD_defs(unsigned int levels)
{
  vcd_write_scope_start(sim_hdl, inst_name);
  vcd_num = vcd_reserve_ids(sim_hdl, 3u);
  unsigned int num = vcd_num;
  for (unsigned int clk = 0u; clk < bk_num_clocks(sim_hdl); ++clk)
    vcd_add_clock_def(sim_hdl, this, bk_clock_name(sim_hdl, clk), bk_clock_vcd_num(sim_hdl, clk));
  vcd_write_def(sim_hdl, bk_clock_vcd_num(sim_hdl, __clk_handle_0), "CLK", 1u);
  vcd_write_def(sim_hdl, num++, "RST_N", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "x__h387", 8u);
  num = INST_cnt.dump_VCD_defs(num);
  if (levels != 1u)
  {
    unsigned int l = levels == 0u ? 0u : levels - 1u;
    num = INST_uut.dump_VCD_defs(l);
  }
  vcd_write_scope_end(sim_hdl);
  return num;
}

void MOD_mkTb::dump_VCD(tVCDDumpType dt, unsigned int levels, MOD_mkTb &backing)
{
  vcd_defs(dt, backing);
  vcd_prims(dt, backing);
  if (levels != 1u)
    vcd_submodules(dt, levels - 1u, backing);
}

void MOD_mkTb::vcd_defs(tVCDDumpType dt, MOD_mkTb &backing)
{
  unsigned int num = vcd_num;
  if (dt == VCD_DUMP_XS)
  {
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 8u);
  }
  else
    if (dt == VCD_DUMP_CHANGES)
    {
      if ((backing.PORT_RST_N) != PORT_RST_N)
      {
	vcd_write_val(sim_hdl, num, PORT_RST_N, 1u);
	backing.PORT_RST_N = PORT_RST_N;
      }
      ++num;
      if ((backing.DEF_x__h387) != DEF_x__h387)
      {
	vcd_write_val(sim_hdl, num, DEF_x__h387, 8u);
	backing.DEF_x__h387 = DEF_x__h387;
      }
      ++num;
    }
    else
    {
      vcd_write_val(sim_hdl, num++, PORT_RST_N, 1u);
      backing.PORT_RST_N = PORT_RST_N;
      vcd_write_val(sim_hdl, num++, DEF_x__h387, 8u);
      backing.DEF_x__h387 = DEF_x__h387;
    }
}

void MOD_mkTb::vcd_prims(tVCDDumpType dt, MOD_mkTb &backing)
{
  INST_cnt.dump_VCD(dt, backing.INST_cnt);
}

void MOD_mkTb::vcd_submodules(tVCDDumpType dt, unsigned int levels, MOD_mkTb &backing)
{
  INST_uut.dump_VCD(dt, levels, backing.INST_uut);
}
