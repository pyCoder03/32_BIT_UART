/*
 * Generated by Bluespec Compiler, version 2021.12.1 (build fd501401)
 * 
 * On Sat Oct 28 15:43:45 IST 2023
 * 
 */
#include "bluesim_primitives.h"
#include "model_mkTb.h"

#include <cstdlib>
#include <time.h>
#include "bluesim_kernel_api.h"
#include "bs_vcd.h"
#include "bs_reset.h"


/* Constructor */
MODEL_mkTb::MODEL_mkTb()
{
  mkTb_instance = NULL;
}

/* Function for creating a new model */
void * new_MODEL_mkTb()
{
  MODEL_mkTb *model = new MODEL_mkTb();
  return (void *)(model);
}

/* Schedule functions */

static void schedule_posedge_CLK(tSimStateHdl simHdl, void *instance_ptr)
       {
	 MOD_mkTb &INST_top = *((MOD_mkTb *)(instance_ptr));
	 tUInt8 DEF_INST_top_INST_uut_DEF_x_wget__h318;
	 tUInt8 DEF_INST_top_INST_uut_DEF_tx_frag_whas_AND_tx_frag_wget___d3;
	 tUInt8 DEF_INST_top_INST_uut_DEF_CAN_FIRE_RL_tx_8bit;
	 tUInt8 DEF_INST_top_INST_uut_DEF_WILL_FIRE_RL_tx_8bit;
	 tUInt8 DEF_INST_top_INST_uut_DEF_CAN_FIRE_RL_update_sbuf;
	 tUInt8 DEF_INST_top_INST_uut_DEF_WILL_FIRE_RL_update_sbuf;
	 tUInt8 DEF_INST_top_INST_uut_DEF_CAN_FIRE_RL_shift_out;
	 tUInt8 DEF_INST_top_INST_uut_DEF_WILL_FIRE_RL_shift_out;
	 tUInt8 DEF_INST_top_INST_uut_DEF_CAN_FIRE_RL_update_cnt;
	 tUInt8 DEF_INST_top_INST_uut_DEF_WILL_FIRE_RL_update_cnt;
	 tUInt8 DEF_INST_top_DEF_CAN_FIRE_RL_update_cnt;
	 tUInt8 DEF_INST_top_DEF_WILL_FIRE_RL_update_cnt;
	 tUInt8 DEF_INST_top_DEF_CAN_FIRE_RL_transmit_uart;
	 tUInt8 DEF_INST_top_DEF_WILL_FIRE_RL_transmit_uart;
	 tUInt8 DEF_INST_top_DEF_CAN_FIRE_RL_get_output;
	 tUInt8 DEF_INST_top_DEF_WILL_FIRE_RL_get_output;
	 INST_top.INST_uut.PORT_EN_par_in = (tUInt8)0u;
	 INST_top.INST_uut.DEF_WILL_FIRE_par_in = (tUInt8)0u;
	 DEF_INST_top_DEF_CAN_FIRE_RL_get_output = (tUInt8)1u;
	 DEF_INST_top_DEF_WILL_FIRE_RL_get_output = DEF_INST_top_DEF_CAN_FIRE_RL_get_output;
	 DEF_INST_top_DEF_CAN_FIRE_RL_transmit_uart = INST_top.INST_uut.METH_RDY_par_in() && INST_top.INST_uut.METH_RDY_start_tx();
	 DEF_INST_top_DEF_WILL_FIRE_RL_transmit_uart = DEF_INST_top_DEF_CAN_FIRE_RL_transmit_uart;
	 DEF_INST_top_DEF_CAN_FIRE_RL_update_cnt = (tUInt8)1u;
	 DEF_INST_top_DEF_WILL_FIRE_RL_update_cnt = DEF_INST_top_DEF_CAN_FIRE_RL_update_cnt;
	 INST_top.INST_uut.DEF_tx___d34 = INST_top.INST_uut.INST_tx.METH_read();
	 DEF_INST_top_INST_uut_DEF_CAN_FIRE_RL_shift_out = INST_top.INST_uut.DEF_tx___d34;
	 DEF_INST_top_INST_uut_DEF_WILL_FIRE_RL_shift_out = DEF_INST_top_INST_uut_DEF_CAN_FIRE_RL_shift_out;
	 DEF_INST_top_INST_uut_DEF_CAN_FIRE_RL_update_cnt = INST_top.INST_uut.DEF_tx___d34;
	 DEF_INST_top_INST_uut_DEF_WILL_FIRE_RL_update_cnt = DEF_INST_top_INST_uut_DEF_CAN_FIRE_RL_update_cnt;
	 if (DEF_INST_top_DEF_WILL_FIRE_RL_get_output)
	   INST_top.RL_get_output();
	 if (DEF_INST_top_DEF_WILL_FIRE_RL_transmit_uart)
	   INST_top.RL_transmit_uart();
	 if (DEF_INST_top_DEF_WILL_FIRE_RL_update_cnt)
	   INST_top.RL_update_cnt();
	 if (DEF_INST_top_INST_uut_DEF_WILL_FIRE_RL_shift_out)
	   INST_top.INST_uut.RL_shift_out();
	 INST_top.INST_uut.DEF_WILL_FIRE_par_in = INST_top.INST_uut.PORT_EN_par_in;
	 DEF_INST_top_INST_uut_DEF_x_wget__h318 = INST_top.INST_uut.INST_tx_frag.METH_wget();
	 DEF_INST_top_INST_uut_DEF_tx_frag_whas_AND_tx_frag_wget___d3 = INST_top.INST_uut.INST_tx_frag.METH_whas() && DEF_INST_top_INST_uut_DEF_x_wget__h318;
	 DEF_INST_top_INST_uut_DEF_CAN_FIRE_RL_tx_8bit = DEF_INST_top_INST_uut_DEF_tx_frag_whas_AND_tx_frag_wget___d3;
	 DEF_INST_top_INST_uut_DEF_WILL_FIRE_RL_tx_8bit = DEF_INST_top_INST_uut_DEF_CAN_FIRE_RL_tx_8bit && !(INST_top.INST_uut.DEF_WILL_FIRE_par_in);
	 DEF_INST_top_INST_uut_DEF_CAN_FIRE_RL_update_sbuf = DEF_INST_top_INST_uut_DEF_tx_frag_whas_AND_tx_frag_wget___d3;
	 DEF_INST_top_INST_uut_DEF_WILL_FIRE_RL_update_sbuf = DEF_INST_top_INST_uut_DEF_CAN_FIRE_RL_update_sbuf;
	 if (DEF_INST_top_INST_uut_DEF_WILL_FIRE_RL_tx_8bit)
	   INST_top.INST_uut.RL_tx_8bit();
	 if (DEF_INST_top_INST_uut_DEF_WILL_FIRE_RL_update_cnt)
	   INST_top.INST_uut.RL_update_cnt();
	 if (DEF_INST_top_INST_uut_DEF_WILL_FIRE_RL_update_sbuf)
	   INST_top.INST_uut.RL_update_sbuf();
	 INST_top.INST_uut.INST_sbuf_din.clk((tUInt8)1u, (tUInt8)1u);
	 INST_top.INST_uut.INST_tx_frag.clk((tUInt8)1u, (tUInt8)1u);
	 if (do_reset_ticks(simHdl))
	 {
	   INST_top.INST_uut.INST_num_reg.rst_tick__clk__1((tUInt8)1u);
	   INST_top.INST_uut.INST_s_cnt.rst_tick__clk__1((tUInt8)1u);
	   INST_top.INST_uut.INST_bit_cnt.rst_tick__clk__1((tUInt8)1u);
	   INST_top.INST_uut.INST_sbuf.rst_tick__clk__1((tUInt8)1u);
	   INST_top.INST_uut.INST_parity.rst_tick__clk__1((tUInt8)1u);
	   INST_top.INST_uut.INST_tx_line.rst_tick__clk__1((tUInt8)1u);
	   INST_top.INST_uut.INST_tx.rst_tick__clk__1((tUInt8)1u);
	   INST_top.INST_cnt.rst_tick__clk__1((tUInt8)1u);
	 }
       };

/* Model creation/destruction functions */

void MODEL_mkTb::create_model(tSimStateHdl simHdl, bool master)
{
  sim_hdl = simHdl;
  init_reset_request_counters(sim_hdl);
  mkTb_instance = new MOD_mkTb(sim_hdl, "top", NULL);
  bk_get_or_define_clock(sim_hdl, "CLK");
  if (master)
  {
    bk_alter_clock(sim_hdl, bk_get_clock_by_name(sim_hdl, "CLK"), CLK_LOW, false, 0llu, 5llu, 5llu);
    bk_use_default_reset(sim_hdl);
  }
  bk_set_clock_event_fn(sim_hdl,
			bk_get_clock_by_name(sim_hdl, "CLK"),
			schedule_posedge_CLK,
			NULL,
			(tEdgeDirection)(POSEDGE));
  (mkTb_instance->INST_uut.INST_tx_frag.set_clk_0)("CLK");
  (mkTb_instance->INST_uut.INST_sbuf_din.set_clk_0)("CLK");
  (mkTb_instance->INST_uut.set_clk_0)("CLK");
  (mkTb_instance->set_clk_0)("CLK");
}
void MODEL_mkTb::destroy_model()
{
  delete mkTb_instance;
  mkTb_instance = NULL;
}
void MODEL_mkTb::reset_model(bool asserted)
{
  (mkTb_instance->reset_RST_N)(asserted ? (tUInt8)0u : (tUInt8)1u);
}
void * MODEL_mkTb::get_instance()
{
  return mkTb_instance;
}

/* Fill in version numbers */
void MODEL_mkTb::get_version(char const **name, char const **build)
{
  *name = "2021.12.1";
  *build = "fd501401";
}

/* Get the model creation time */
time_t MODEL_mkTb::get_creation_time()
{
  
  /* Sat Oct 28 10:13:45 UTC 2023 */
  return 1698488025llu;
}

/* State dumping function */
void MODEL_mkTb::dump_state()
{
  (mkTb_instance->dump_state)(0u);
}

/* VCD dumping functions */
MOD_mkTb & mkTb_backing(tSimStateHdl simHdl)
{
  static MOD_mkTb *instance = NULL;
  if (instance == NULL)
  {
    vcd_set_backing_instance(simHdl, true);
    instance = new MOD_mkTb(simHdl, "top", NULL);
    vcd_set_backing_instance(simHdl, false);
  }
  return *instance;
}
void MODEL_mkTb::dump_VCD_defs()
{
  (mkTb_instance->dump_VCD_defs)(vcd_depth(sim_hdl));
}
void MODEL_mkTb::dump_VCD(tVCDDumpType dt)
{
  (mkTb_instance->dump_VCD)(dt, vcd_depth(sim_hdl), mkTb_backing(sim_hdl));
}
