/*
 * Generated by Bluespec Compiler, version 2021.12.1 (build fd501401)
 * 
 * On Fri Oct 27 19:55:38 IST 2023
 * 
 */

/* Generation options: */
#ifndef __mkUART_h__
#define __mkUART_h__

#include "bluesim_types.h"
#include "bs_module.h"
#include "bluesim_primitives.h"
#include "bs_vcd.h"


/* Class declaration for the mkUART module */
class MOD_mkUART : public Module {
 
 /* Clock handles */
 private:
  tClock __clk_handle_0;
 
 /* Clock gate handles */
 public:
  tUInt8 *clk_gate[0];
 
 /* Instantiation parameters */
 public:
 
 /* Module state */
 public:
  MOD_Reg<tUInt8> INST_bit_cnt;
  MOD_Reg<tUInt8> INST_parity;
  MOD_Reg<tUInt8> INST_sbuf;
  MOD_Reg<tUInt8> INST_tx;
  MOD_Reg<tUInt8> INST_tx_line;
 
 /* Constructor */
 public:
  MOD_mkUART(tSimStateHdl simHdl, char const *name, Module *parent);
 
 /* Symbol init methods */
 private:
  void init_symbols_0();
 
 /* Reset signal definitions */
 private:
  tUInt8 PORT_RST_N;
 
 /* Port definitions */
 public:
 
 /* Publicly accessible definitions */
 public:
  tUInt8 DEF_NOT_tx___d16;
  tUInt8 DEF_tx___d1;
 
 /* Local definitions */
 private:
 
 /* Rules */
 public:
  void RL_shift_out();
 
 /* Methods */
 public:
  void METH_par_in(tUInt8 ARG_par_in_par_input);
  tUInt8 METH_RDY_par_in();
  void METH_start_tx();
  tUInt8 METH_RDY_start_tx();
  tUInt8 METH_uart_tx();
  tUInt8 METH_RDY_uart_tx();
 
 /* Reset routines */
 public:
  void reset_RST_N(tUInt8 ARG_rst_in);
 
 /* Static handles to reset routines */
 public:
 
 /* Pointers to reset fns in parent module for asserting output resets */
 private:
 
 /* Functions for the parent module to register its reset fns */
 public:
 
 /* Functions to set the elaborated clock id */
 public:
  void set_clk_0(char const *s);
 
 /* State dumping routine */
 public:
  void dump_state(unsigned int indent);
 
 /* VCD dumping routines */
 public:
  unsigned int dump_VCD_defs(unsigned int levels);
  void dump_VCD(tVCDDumpType dt, unsigned int levels, MOD_mkUART &backing);
  void vcd_defs(tVCDDumpType dt, MOD_mkUART &backing);
  void vcd_prims(tVCDDumpType dt, MOD_mkUART &backing);
};

#endif /* ifndef __mkUART_h__ */
