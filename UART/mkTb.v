//
// Generated by Bluespec Compiler, version 2021.12.1 (build fd501401)
//
// On Fri Oct 27 19:56:26 IST 2023
//
//
// Ports:
// Name                         I/O  size props
// CLK                            I     1 clock
// RST_N                          I     1 reset
//
// No combinational paths from inputs to outputs
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module mkTb(CLK,
	    RST_N);
  input  CLK;
  input  RST_N;

  // register cnt
  reg [5 : 0] cnt;
  wire [5 : 0] cnt$D_IN;
  wire cnt$EN;

  // ports of submodule uut
  reg [7 : 0] uut$par_in_par_input;
  wire uut$EN_par_in,
       uut$EN_start_tx,
       uut$RDY_par_in,
       uut$RDY_start_tx,
       uut$uart_tx;

  // rule scheduling signals
  wire WILL_FIRE_RL_transmit_uart;

  // submodule uut
  mkUART uut(.CLK(CLK),
	     .RST_N(RST_N),
	     .par_in_par_input(uut$par_in_par_input),
	     .EN_par_in(uut$EN_par_in),
	     .EN_start_tx(uut$EN_start_tx),
	     .RDY_par_in(uut$RDY_par_in),
	     .RDY_start_tx(uut$RDY_start_tx),
	     .uart_tx(uut$uart_tx));

  // rule RL_transmit_uart
  assign WILL_FIRE_RL_transmit_uart = uut$RDY_par_in && uut$RDY_start_tx ;

  // register cnt
  assign cnt$D_IN = cnt + 6'd1 ;
  assign cnt$EN = 1'd1 ;

  // submodule uut
  always@(cnt)
  begin
    case (cnt)
      6'd3: uut$par_in_par_input = 8'hCA;
      6'd25: uut$par_in_par_input = 8'hAB;
      default: uut$par_in_par_input = 8'h4B;
    endcase
  end
  assign uut$EN_par_in =
	     WILL_FIRE_RL_transmit_uart &&
	     (cnt == 6'd3 || cnt == 6'd25 || cnt == 6'd45) ;
  assign uut$EN_start_tx =
	     WILL_FIRE_RL_transmit_uart &&
	     (cnt == 6'd10 || cnt == 6'd30 || cnt == 6'd50) ;

  // handling of inlined registers

  always@(posedge CLK)
  begin
    if (RST_N == `BSV_RESET_VALUE)
      begin
        cnt <= `BSV_ASSIGNMENT_DELAY 6'd0;
      end
    else
      begin
        if (cnt$EN) cnt <= `BSV_ASSIGNMENT_DELAY cnt$D_IN;
      end
  end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    cnt = 6'h2A;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on

  // handling of system tasks

  // synopsys translate_off
  always@(negedge CLK)
  begin
    #0;
    if (RST_N != `BSV_RESET_VALUE)
      $display("Cnt: %d, Output: %d", cnt, uut$uart_tx);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_transmit_uart && cnt == 6'd63) $finish(32'd1);
  end
  // synopsys translate_on
endmodule  // mkTb

